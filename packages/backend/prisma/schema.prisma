
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// USER MANAGEMENT & AUTHENTICATION
// =============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  password  String
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  googleId String? @unique
  githubId String? @unique

  // Multi-tenancy relationships
  ownedWorkspaces    Workspace[]       @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMember[]

  // Content relationships
  assignedTasks Task[]     @relation("TaskAssignee")
  createdTasks  Task[]     @relation("TaskCreator")
  comments      Comment[]
  attachments   Attachment[]
  activities    Activity[]

  // Refresh tokens for JWT
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// =============================================
// MULTI-TENANCY & WORKSPACE MANAGEMENT
// =============================================

enum WorkspacePlan {
  FREE
  PRO
  ENTERPRISE
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  avatar      String?
  plan        WorkspacePlan @default(FREE)
  isActive    Boolean       @default(true)
  settings    Json          @default("{}")
  ownerId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  owner   User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members WorkspaceMember[]
  projects Project[]
  activities Activity[]

  @@map("workspaces")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  isActive    Boolean       @default(true)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

// =============================================
// PROJECT & TASK MANAGEMENT
// =============================================

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String        @default("#3B82F6")
  status      ProjectStatus @default(ACTIVE)
  workspaceId String
  ownerId     String
  settings    Json          @default("{}")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  boards    Board[]

  @@index([workspaceId])
  @@map("projects")
}

model Board {
  id        String @id @default(cuid())
  name      String
  position  Int
  projectId String
  color     String @default("#6B7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@index([projectId])
  @@map("boards")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(TODO)
  position    Float        @default(0)
  dueDate     DateTime?
  completedAt DateTime?
  boardId     String
  assigneeId  String?
  creatorId   String
  estimatedHours Float?
  actualHours    Float?
  labels      String[]     @default([])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  board     Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assignee  User?        @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator   User         @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  attachments Attachment[]

  @@index([boardId])
  @@index([assigneeId])
  @@index([creatorId])
  @@index([status])
  @@index([priority])
  @@map("tasks")
}

// =============================================
// COLLABORATION FEATURES
// =============================================

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  parentId  String?  // For threaded comments
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task     Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentThread")

  @@index([taskId])
  @@index([authorId])
  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  filename   String
  originalName String
  url        String
  mimeType   String
  size       Int
  taskId     String
  uploaderId String
  createdAt  DateTime @default(now())

  task     Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("attachments")
}

// =============================================
// ACTIVITY & AUDIT LOGGING
// =============================================

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  PROJECT_CREATED
  BOARD_CREATED
  MEMBER_ADDED
  MEMBER_REMOVED
  WORKSPACE_UPDATED
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json         @default("{}")
  workspaceId String
  userId      String
  entityId    String?      // ID of the entity being acted upon
  entityType  String?      // Type of entity (task, project, etc.)
  createdAt   DateTime     @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([userId])
  @@index([createdAt])
  @@map("activities")
}

// =============================================
// PERFORMANCE & ANALYTICS
// =============================================

model Analytics {
  id          String   @id @default(cuid())
  workspaceId String
  date        DateTime @db.Date
  tasksCreated    Int  @default(0)
  tasksCompleted  Int  @default(0)
  activeUsers     Int  @default(0)
  totalUsers      Int  @default(0)
  totalProjects   Int  @default(0)
  avgTaskCompletionTime Float? // in hours
  createdAt   DateTime @default(now())

  @@unique([workspaceId, date])
  @@index([workspaceId])
  @@index([date])
  @@map("analytics")
}

// =============================================
// REAL-TIME FEATURES
// =============================================

model OnlineUser {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  socketId    String
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@map("online_users")
}

// =============================================
// NOTIFICATIONS
// =============================================

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  COMMENT_MENTION
  PROJECT_INVITE
  WORKSPACE_INVITE
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  userId      String
  workspaceId String
  entityId    String?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@index([userId])
  @@index([workspaceId])
  @@index([createdAt])
  @@map("notifications")
} 